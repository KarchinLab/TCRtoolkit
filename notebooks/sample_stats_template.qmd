---
title: "Basic bulk T Cell Repertoire statistics"
format:
  html: 
    theme: flatly
    toc: true
    toc_depth: 3
    code-fold: true
    embed-resources: true
    number-sections: true
    grid:
      body-width: 1000px
      margin-width: 300px

jupyter: python3
---

This notebook was generated via the `bulk-tcrseq` pipeline developed at Johns Hopkins for use by BTC scientists. 

# Report Setup

## Load Packages

```{python}
from IPython.display import Image
import os
import datetime
import sys
import pandas as pd
import math
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib.colors import LinearSegmentedColormap
import plotly.express as px
```

## Pipeline Parameters

Default inputs are overwritten at the command line in `modules/local/plot_sample.nf`
```{python, echo=false}
#| tags: [parameters]
#| echo: false

workflow_cmd='<command used to run the pipeline>'
project_name='path/to/project_name'
project_dir='path/to/project_dir'
sample_table='path/to/sample_table.csv'
sample_stats_csv='path/to/sample_stats.csv'
v_family_csv='path/to/v_family.csv'
```

```{python}
print('Project Name:          ' + project_name)
print('Workflow command:      ' + workflow_cmd)
print('Pipeline Directory:    ' + project_dir)
print('Date and time:         ' + str(datetime.datetime.now()))
```

## Importing custom plotting functions

Plotting functions are defined in `bin/plot_utils.py`.

```{python}
## custom plotting and timing functions
sys.path.append(project_dir + '/bin/')
from plot_utils import TicTocGenerator, tic, toc, plot_timecourse2, plt_combined

## create an instance of the TicTocGen generator
TicToc = TicTocGenerator()
```

## Loading data

```{python}
tic()

## reading combined repertoire statistics
df = pd.read_csv(sample_stats_csv, sep=',', header=0, 
                 names=['sample_id', 'patient_id', 'timepoint', 'origin', 'num_clones', 
                        'num_TCRs', 'simpson_index', 'simpson_index_corrected', 'clonality',
                        'num_in', 'num_out', 'num_stop', 'pct_prod', 'pct_out', 'pct_stop', 'pct_nonprod',
                        'cdr3_avg_len'])
print('-- Imported sample_stats_csv as `df`...')

## reading sample metadata
meta = pd.read_csv(sample_table, sep=',', header=0, index_col=None,
                   names=['sample_id', 'file_path', 'patient_id', 'timepoint', 'origin'])
print('-- Imported sample_table as `meta`...')

## reading V gene family usage 
v_family = pd.read_csv(v_family_csv, sep=',', header=0, index_col=None,
                       names=['patient_id', 'timepoint', 'origin', 'TCRBV01', 
                              'TCRBV02', 'TCRBV03', 'TCRBV04', 'TCRBV05', 'TCRBV06',
                              'TCRBV07', 'TCRBV08', 'TCRBV09', 'TCRBV10', 'TCRBV11',
                              'TCRBV12', 'TCRBV13', 'TCRBV14', 'TCRBV15', 'TCRBV16',
                              'TCRBV17', 'TCRBV18', 'TCRBV19', 'TCRBV20', 'TCRBV21',
                              'TCRBV22', 'TCRBV23', 'TCRBV24', 'TCRBV25', 'TCRBV26',
                              'TCRBV27', 'TCRBV28', 'TCRBV29', 'TCRBV30'])
v_family = v_family.sort_values(by=['patient_id', 'timepoint'])
print('-- Imported v_family_csv as `v_family`...')

toc()
```

# Sample level statistics v3

Below are plots showing basic T cell repertoire statistics. Each plot has a description about the statistic shown and formulas used to calculate the metric when applicable. Specific biological interpretation of each plot is left to the user.

Version 3 of these plots features plotly express interactive plots. This version is exploratory and may be updated in the future.

## Number of clones

```{python}
timepts = df.timepoint.unique().tolist()
timepts.sort()
fig = px.box(df, 
             x = 'timepoint', 
             y='num_clones', 
             color='origin', 
             points='all', hover_data=['sample_id'],
             category_orders={'timepoint': timepts})
fig.show()
```

**Figure 1. Number of clones across timepoints.** A clone is defined as a T cell with a unique CDR3 amino acid sequence. The number of clones is shown on the y-axis and 'origin_timepoint' is shown on the x-axis. Left: Boxplot, Right: matched paitent line plot.

## Clonality

```{python}
fig = px.box(df, 
             x = 'timepoint', 
             y='clonality', 
             color='origin', 
             points='all', hover_data=['sample_id'],
             category_orders={'timepoint': timepts})
fig.show()
```

**Figure 2. The clonality of samples across timepoints.** Clonality is a measure of T cell clonal expansion and reflects the degree to which the sample is dominated by 1 or more T cell clones. Clonality is calculated via: $$Clonality = \frac {1-H} {\log_{2} N} \quad\text{,}\quad H = -\sum\limits_{i=1}^N p_i \log_{2}{p_i}$$ where $H$ is the Shannon entropy of a given sample, $N$ is the number of unique TCRs in the sample, and $p_i$ is the frequency of the $i$ th unique TCR in the sample. Left: Boxplot, Right: matched paitent line plot.

## Simpson Index

```{python}
fig = px.box(df, 
             x = 'timepoint', 
             y='simpson_index_corrected', 
             color='origin', 
             points='all', hover_data=['sample_id'],
             category_orders={'timepoint': timepts})
fig.show()
```

**Figure 3. Corrected Simpson Index.** The Simpson Index is a measure of diversity that takes into account the number of clones and the relative abundance of each clone in a sample. The corrected Simpson Index, $D$, is calculated as: 

$$D = \sum\limits_{i=1}^N \frac {p_i(p_i - 1)} {T(T - 1)} \quad\text{,}\quad T = \sum\limits_{i=1}^N p_i$$

Where $N$ is the number of unique TCRs in the sample, $p_i$ is the frequency of the $i$ th unique TCR in the sample, and $T$ is the total number of T Cells counted in the sample. Left: Boxplot, Right: matched paitent line plot.

## Percent of productive TCRs

```{python}
fig = px.box(df, 
             x = 'timepoint', 
             y='pct_prod', 
             color='origin', 
             points='all', hover_data=['sample_id'],
             category_orders={'timepoint': timepts})
fig.show()
```

**Figure 4. Percent of productive TCRs.** A productive TCR is a DNA/RNA sequence that can be translated into a protein sequence, i.e. it does not contain a premature stop codon or an out of frame rearrangement. The percent of productive TCRs is calculated as: 

$$ Percent \text{ } productive \text{ } TCRs = \frac P N $$

where $P$ is the number of productive TCRs and $N$ is the total number of TCRs in a given sample. Left: Boxplot, Right: matched paitent line plot.

## Average CDR3 Length

```{python}
fig = px.box(df, 
             x = 'timepoint', 
             y='cdr3_avg_len', 
             color='origin', 
             points='all', hover_data=['sample_id'],
             category_orders={'timepoint': timepts})
fig.show()
```

**Figure 5. Average CDR3 Length** The average length of the CDR3 region of the TCR. The CDR3 region is the most variable region of the TCR and is the region that determines antigen specificity. Left: Boxplot, Right: matched paitent line plot.

## V gene family usage

**Figure 6. V gene family usage.** The V gene family usage of the TCRs in each sample. The x-axis shows the timepoint collected for each individual, and the y-axis shows the proportion of TCRs that use each V gene family.

The equation for calculating the proportion of TCRs that use a given V gene family is:

$$n_gk$$

```{python}
## loop through all patients and plot stacked bar chart of v_family
v_genes = ["TCRBV01", "TCRBV02", "TCRBV03", "TCRBV04", "TCRBV05", "TCRBV06", "TCRBV07", 
           "TCRBV08", "TCRBV09", "TCRBV10", "TCRBV11", "TCRBV12", "TCRBV13", "TCRBV14", 
           "TCRBV15", "TCRBV16", "TCRBV17", "TCRBV18", "TCRBV19", "TCRBV20", "TCRBV21", 
           "TCRBV22", "TCRBV23", "TCRBV24", "TCRBV25", "TCRBV26", "TCRBV27", "TCRBV28", 
           "TCRBV29", "TCRBV30"]

for patient in v_family.patient_id.unique().tolist():
    v_family_counts = v_family[v_family.patient_id == patient]

    # Assume v_family_9881 is a DataFrame with columns 'timepoint' and 'TCRBV01'-'TCRBV30'

    # Reshape from wide to long format
    df_long = pd.melt(v_family_counts, id_vars=['timepoint', 'origin'], value_vars=v_genes, var_name='gene', value_name='value')

    # Generate a palette with as many colors as there are genes
    palette = sns.color_palette('magma', len(v_genes))

    # Convert the RGB values to hexadecimal
    palette_hex = palette.as_hex()

    # Create the color map
    color_map = {gene: color for gene, color in zip(v_genes, palette_hex)}

    # Create the plot
    fig = px.bar(df_long, x='timepoint', y='value', color='gene', 
                 title=('Subject: ' + str(patient) + ', V Gene Family Usage'), 
                 color_discrete_map=color_map, facet_col='origin')

    fig.show()
```

# Sample level statistics v2

Below are plots showing basic T cell repertoire statistics. Each plot has a description about the statistic shown and formulas used to calculate the metric when applicable. Specific biological interpretation of each plot is left to the user.

## Number of clones

```{python}
plt_combined(df, x_col='timepoint', y_col='num_clones', patient_col='patient_id')
```

**Figure 1. Number of clones across timepoints.** A clone is defined as a T cell with a unique CDR3 amino acid sequence. The number of clones is shown on the y-axis and 'origin_timepoint' is shown on the x-axis. Left: Boxplot, Right: matched paitent line plot.

## Clonality

```{python}
plt_combined(df, x_col='timepoint', y_col='clonality', patient_col='patient_id')
```

**Figure 2. The clonality of samples across timepoints.** Clonality is a measure of T cell clonal expansion and reflects the degree to which the sample is dominated by 1 or more T cell clones. Clonality is calculated via: $$Clonality = \frac {1-H} {\log_{2} N} \quad\text{,}\quad H = -\sum\limits_{i=1}^N p_i \log_{2}{p_i}$$ where $H$ is the Shannon entropy of a given sample, $N$ is the number of unique TCRs in the sample, and $p_i$ is the frequency of the $i$ th unique TCR in the sample. Left: Boxplot, Right: matched paitent line plot.

## Simpson Index

```{python}
plt_combined(df, x_col='timepoint', y_col='simpson_index_corrected', patient_col='patient_id')
```

**Figure 3. Corrected Simpson Index.** The Simpson Index is a measure of diversity that takes into account the number of clones and the relative abundance of each clone in a sample. The corrected Simpson Index, $D$, is calculated as: 

$$D = \sum\limits_{i=1}^N \frac {p_i(p_i - 1)} {T(T - 1)} \quad\text{,}\quad T = \sum\limits_{i=1}^N p_i$$

Where $N$ is the number of unique TCRs in the sample, $p_i$ is the frequency of the $i$ th unique TCR in the sample, and $T$ is the total number of T Cells counted in the sample. Left: Boxplot, Right: matched paitent line plot.

## Percent of productive TCRs

```{python}
plt_combined(df, x_col='timepoint', y_col='pct_prod', patient_col='patient_id')
```

**Figure 4. Percent of productive TCRs.** A productive TCR is a DNA/RNA sequence that can be translated into a protein sequence, i.e. it does not contain a premature stop codon or an out of frame rearrangement. The percent of productive TCRs is calculated as: 

$$ Percent \text{ } productive \text{ } TCRs = \frac P N $$

where $P$ is the number of productive TCRs and $N$ is the total number of TCRs in a given sample. Left: Boxplot, Right: matched paitent line plot.

## Average CDR3 Length

```{python}
plt_combined(df, x_col='timepoint', y_col='cdr3_avg_len', patient_col='patient_id')
```

**Figure 5. Average CDR3 Length** The average length of the CDR3 region of the TCR. The CDR3 region is the most variable region of the TCR and is the region that determines antigen specificity. Left: Boxplot, Right: matched paitent line plot.

## V gene family usage

**Figure 6. V gene family usage of the T Cell Receptors.** The x-axis shows the timepoint collected for each individual, and the y-axis displays the proportion V gene family.

The equation for calculating the proportion of TCRs that use a given V gene family is:

$$n_gk$$


```{python}
# Loop through each patient and plot gene usage
# Calculate the number of rows and columns
N = len(v_family['patient_id'].unique())
rows = math.ceil(N / 2)
cols = 2

# Create a figure and axes for subplots
patients = v_family['patient_id'].unique()
fig, axes = plt.subplots(rows, cols, figsize=(10, rows*5), sharey=True)

for i, ax in enumerate(axes.flatten()):
    if i >= len(patients):
        ax.set_visible(False)
        continue
    
    pt = v_family[v_family['patient_id'] == patients[i]]
    pt.loc[:, ['identity']] = pt['origin'] + '_' + pt['timepoint']
    
    # removing metadata columns and set new index
    pt_raw = pt.drop(['patient_id', 'timepoint', 'origin'], axis=1)
    pt_raw.set_index('identity', inplace=True)

    # calculate percentages for each gene from the row total
    pt_pct = pt_raw.apply(lambda row: row / row.sum(), axis=1)

    #### ================ PLOTTING ================ ####

    # Create a color palette
    colors = sns.cubehelix_palette(n_colors=len(pt_pct.columns),
                               start = 1.75, rot = 1, reverse=True)
    cmap1 = LinearSegmentedColormap.from_list("my_colormap", colors)

    # Plot stacked bar chart for current patient
    pt_pct.plot(ax=ax, kind='bar', stacked=True, colormap=cmap1, 
                edgecolor='white')
    ax.set_title(str(patients[i]))
    ax.set_ylabel('Portion of TCRs')
    ax.get_legend().set_visible(False)

    # Align x-axis plots
    ax.set_xticks(range(len(pt_pct.index)))
    ax.set_xticklabels(pt_pct.index, fontsize=12,
                       rotation=0, ha='center')
    ax.set_xlabel('')  # Remove x-label 'identity'

# Add a common title for the whole figure
fig.suptitle('V Family Usage for All Patients', fontsize=24)

# Create a common legend outside the loop
handles, labels = ax.get_legend_handles_labels()
fig.legend(handles, labels, loc='center left', bbox_to_anchor=(1.0, 0.5))

# Adjust spacing between subplots
plt.tight_layout()
fig.subplots_adjust(top=0.96)

plt.savefig('v_family_usage.png')
plt.show()
plt.close()
```

**Figure 6. V gene family usage.** The V gene family usage of the TCRs in each sample. The x-axis shows the timepoint collected for each individual, and the y-axis shows the proportion of TCRs that use each V gene family.

# Execution environment

```{python}
print(os.system('mamba env export --no-builds'))
```
